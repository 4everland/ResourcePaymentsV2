/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HostingPaymentMigrationInterface extends ethers.utils.Interface {
  functions: {
    "addCombo((uint256,uint256,uint256,uint256,bytes28,bool))": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "addToken(address)": FunctionFragment;
    "boughtTime(bytes28)": FunctionFragment;
    "canV1Buy(bytes28,uint256)": FunctionFragment;
    "canV1Renew(bytes28)": FunctionFragment;
    "canV1Upgrade(bytes28,uint256)": FunctionFragment;
    "comboLength()": FunctionFragment;
    "combos(uint256)": FunctionFragment;
    "cost(bytes28)": FunctionFragment;
    "decimalMethod()": FunctionFragment;
    "decimals(uint256)": FunctionFragment;
    "expiration(bytes28)": FunctionFragment;
    "expirationAt(bytes28)": FunctionFragment;
    "getComboCost(uint256,uint256)": FunctionFragment;
    "hasMigrated(bytes28)": FunctionFragment;
    "isCustom(uint256)": FunctionFragment;
    "isExpired(bytes28)": FunctionFragment;
    "isManagers(address)": FunctionFragment;
    "isMigrated(bytes28)": FunctionFragment;
    "level(bytes28)": FunctionFragment;
    "migrateV1Receipts(bytes28)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentV1()": FunctionFragment;
    "rcall()": FunctionFragment;
    "receiptV1(bytes28)": FunctionFragment;
    "receipts(bytes28)": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "removeToken(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "to(bytes28)": FunctionFragment;
    "token(bytes28)": FunctionFragment;
    "tokenLength()": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCombo(uint256,(uint256,uint256,uint256,uint256,bytes28,bool))": FunctionFragment;
    "validateCombo(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCombo",
    values: [
      {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(functionFragment: "addToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "boughtTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canV1Buy",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canV1Renew",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canV1Upgrade",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "comboLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "combos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cost", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "decimalMethod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getComboCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMigrated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCustom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isManagers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isMigrated",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "level", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "migrateV1Receipts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paymentV1", values?: undefined): string;
  encodeFunctionData(functionFragment: "rcall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiptV1",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "receipts", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "to", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "token", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "tokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCombo",
    values: [
      BigNumberish,
      {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateCombo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addCombo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boughtTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canV1Buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canV1Renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canV1Upgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comboLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "combos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComboCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCustom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isManagers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMigrated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateV1Receipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paymentV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rcall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiptV1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "to", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCombo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateCombo",
    data: BytesLike
  ): Result;

  events: {
    "AddCombo(bytes28,uint256,tuple)": EventFragment;
    "AddManger(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveManger(address)": EventFragment;
    "UpdateCombo(bytes28,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCombo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddManger"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveManger"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCombo"): EventFragment;
}

export type AddComboEvent = TypedEvent<
  [
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    }
  ] & {
    to: string;
    level: BigNumber;
    combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    };
  }
>;

export type AddMangerEvent = TypedEvent<[string] & { manager: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RemoveMangerEvent = TypedEvent<[string] & { manager: string }>;

export type UpdateComboEvent = TypedEvent<
  [
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    }
  ] & {
    to: string;
    level: BigNumber;
    combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    };
  }
>;

export class HostingPaymentMigration extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HostingPaymentMigrationInterface;

  functions: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    boughtTime(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canV1Buy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canV1Renew(uuid: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    canV1Upgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    comboLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    combos(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ]
    >;

    cost(uuid: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimalMethod(overrides?: CallOverrides): Promise<[string]>;

    decimals(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expiration(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    hasMigrated(uuid: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isCustom(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isManagers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isMigrated(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    level(uuid: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateV1Receipts(
      uuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentV1(overrides?: CallOverrides): Promise<[string]>;

    rcall(overrides?: CallOverrides): Promise<[string]>;

    receiptV1(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        to: string;
        level: BigNumber;
        boughtTime: BigNumber;
        expiration: BigNumber;
      }
    >;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          to: string;
          token: string;
          level: BigNumber;
          boughtTime: BigNumber;
          expiration: BigNumber;
          cost: BigNumber;
        }
      ]
    >;

    removeManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeToken(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    to(uuid: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    token(uuid: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    tokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokens(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateCombo(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  addCombo(
    combo: {
      bandwidth: BigNumberish;
      storageAmount: BigNumberish;
      buildingTime: BigNumberish;
      pricePerMonth: BigNumberish;
      to: BytesLike;
      isValid: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManager(
    manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  boughtTime(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  canV1Buy(
    uuid: BytesLike,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canV1Renew(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  canV1Upgrade(
    uuid: BytesLike,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  comboLength(overrides?: CallOverrides): Promise<BigNumber>;

  combos(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    }
  >;

  cost(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  decimalMethod(overrides?: CallOverrides): Promise<string>;

  decimals(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  expiration(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  expirationAt(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getComboCost(
    level: BigNumberish,
    expiration_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasMigrated(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isCustom(level: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isManagers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isMigrated(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  level(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  migrateV1Receipts(
    uuid: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentV1(overrides?: CallOverrides): Promise<string>;

  rcall(overrides?: CallOverrides): Promise<string>;

  receiptV1(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      to: string;
      level: BigNumber;
      boughtTime: BigNumber;
      expiration: BigNumber;
    }
  >;

  receipts(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      to: string;
      token: string;
      level: BigNumber;
      boughtTime: BigNumber;
      expiration: BigNumber;
      cost: BigNumber;
    }
  >;

  removeManager(
    manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeToken(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  to(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

  token(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

  tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  tokens(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCombo(
    level: BigNumberish,
    combo: {
      bandwidth: BigNumberish;
      storageAmount: BigNumberish;
      buildingTime: BigNumberish;
      pricePerMonth: BigNumberish;
      to: BytesLike;
      isValid: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateCombo(level: BigNumberish, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    addManager(manager: string, overrides?: CallOverrides): Promise<void>;

    addToken(token: string, overrides?: CallOverrides): Promise<void>;

    boughtTime(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    canV1Buy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canV1Renew(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    canV1Upgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    comboLength(overrides?: CallOverrides): Promise<BigNumber>;

    combos(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        bandwidth: BigNumber;
        storageAmount: BigNumber;
        buildingTime: BigNumber;
        pricePerMonth: BigNumber;
        to: string;
        isValid: boolean;
      }
    >;

    cost(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    decimalMethod(overrides?: CallOverrides): Promise<string>;

    decimals(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiration(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMigrated(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isCustom(level: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isManagers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isMigrated(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    level(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    migrateV1Receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentV1(overrides?: CallOverrides): Promise<string>;

    rcall(overrides?: CallOverrides): Promise<string>;

    receiptV1(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        to: string;
        level: BigNumber;
        boughtTime: BigNumber;
        expiration: BigNumber;
      }
    >;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        to: string;
        token: string;
        level: BigNumber;
        boughtTime: BigNumber;
        expiration: BigNumber;
        cost: BigNumber;
      }
    >;

    removeManager(manager: string, overrides?: CallOverrides): Promise<void>;

    removeToken(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    to(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

    token(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

    tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    validateCombo(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddCombo(bytes28,uint256,tuple)"(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;

    AddCombo(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;

    "AddManger(address)"(
      manager?: string | null
    ): TypedEventFilter<[string], { manager: string }>;

    AddManger(
      manager?: string | null
    ): TypedEventFilter<[string], { manager: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RemoveManger(address)"(
      manager?: string | null
    ): TypedEventFilter<[string], { manager: string }>;

    RemoveManger(
      manager?: string | null
    ): TypedEventFilter<[string], { manager: string }>;

    "UpdateCombo(bytes28,uint256,tuple)"(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;

    UpdateCombo(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;
  };

  estimateGas: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    boughtTime(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    canV1Buy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canV1Renew(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    canV1Upgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    comboLength(overrides?: CallOverrides): Promise<BigNumber>;

    combos(level: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    cost(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    decimalMethod(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiration(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasMigrated(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isCustom(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isManagers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isMigrated(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    level(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    migrateV1Receipts(
      uuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentV1(overrides?: CallOverrides): Promise<BigNumber>;

    rcall(overrides?: CallOverrides): Promise<BigNumber>;

    receiptV1(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    receipts(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    removeManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeToken(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    to(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    token(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateCombo(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    boughtTime(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canV1Buy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canV1Renew(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canV1Upgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    comboLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    combos(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cost(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimalMethod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiration(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasMigrated(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCustom(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExpired(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManagers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMigrated(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateV1Receipts(
      uuid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentV1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rcall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiptV1(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeManager(
      manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeToken(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    to(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateCombo(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
