/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IHostingReceiptsV1Interface extends ethers.utils.Interface {
  functions: {
    "canBuy(bytes28,uint256)": FunctionFragment;
    "canRenew(bytes28)": FunctionFragment;
    "canUpgrade(bytes28,uint256)": FunctionFragment;
    "receipts(bytes28)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canBuy",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "canRenew", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "canUpgrade",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "receipts", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "canBuy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRenew", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canUpgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;

  events: {};
}

export class IHostingReceiptsV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IHostingReceiptsV1Interface;

  functions: {
    canBuy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canRenew(uuid: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    canUpgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
            bandwidth: BigNumber;
            storageAmount: BigNumber;
            buildingTime: BigNumber;
            pricePerMonth: BigNumber;
            to: string;
            isValid: boolean;
          }
        ] & {
          to: string;
          token: string;
          level: BigNumber;
          boughtTime: BigNumber;
          expiration: BigNumber;
          totalValue: BigNumber;
          realCost: BigNumber;
          combo: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            string,
            boolean
          ] & {
            bandwidth: BigNumber;
            storageAmount: BigNumber;
            buildingTime: BigNumber;
            pricePerMonth: BigNumber;
            to: string;
            isValid: boolean;
          };
        }
      ]
    >;
  };

  canBuy(
    uuid: BytesLike,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canRenew(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  canUpgrade(
    uuid: BytesLike,
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  receipts(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        bandwidth: BigNumber;
        storageAmount: BigNumber;
        buildingTime: BigNumber;
        pricePerMonth: BigNumber;
        to: string;
        isValid: boolean;
      }
    ] & {
      to: string;
      token: string;
      level: BigNumber;
      boughtTime: BigNumber;
      expiration: BigNumber;
      totalValue: BigNumber;
      realCost: BigNumber;
      combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        bandwidth: BigNumber;
        storageAmount: BigNumber;
        buildingTime: BigNumber;
        pricePerMonth: BigNumber;
        to: string;
        isValid: boolean;
      };
    }
  >;

  callStatic: {
    canBuy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canRenew(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    canUpgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ] & {
        to: string;
        token: string;
        level: BigNumber;
        boughtTime: BigNumber;
        expiration: BigNumber;
        totalValue: BigNumber;
        realCost: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;
  };

  filters: {};

  estimateGas: {
    canBuy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRenew(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    canUpgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    receipts(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canBuy(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRenew(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUpgrade(
      uuid: BytesLike,
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
